{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Solar PV tool","text":"<p>The PV-Generation tool can be used to model the potential solar generation ability of a site. The tool uses solar panel, weather and location data to estimate the potential energy generation of a commercial site. There is a <code>Demo_notebook.ipynb</code> that users can run to get a basic understanding of how the tool works and see various functionalities.</p> <p>Data is provided in the <code>data</code> folder with both example site energy consumption data, weather data examples from the weather tool and capital cost data to do with the solar pv panels.</p>"},{"location":"reference/main/","title":"Main","text":""},{"location":"reference/main/#main.create_demo_pv_installation","title":"<code>create_demo_pv_installation()</code>","text":"<p>Create a demo PV installation with a size of 250 kWp.</p> <p>Returns:</p> Name Type Description <code>PvInstallation</code> <code>PvInstallation</code> <p>A PV installation with a size of 250 kWp.</p>"},{"location":"reference/main/#main.main","title":"<code>main()</code>","text":"<p>Run the demo PV installation and return the results.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The results of the demo PV installation</p>"},{"location":"reference/models/","title":"Index","text":""},{"location":"reference/models/param/","title":"Param","text":""},{"location":"reference/models/param/#models.param.PvPanelParam","title":"<code>PvPanelParam</code>  <code>dataclass</code>","text":"<p>Class to store the parameters of a solar pv panel.</p> <p>Attributes:</p> Name Type Description <code>module_data</code> <code>DataFrame | None</code> <p>pd.DataFrame | None The data of the solar pv panel.</p> <code>lifetime</code> <code>float</code> <p>float The lifetime of the solar pv panel in years.</p> <code>a</code> <code>float</code> <p>float</p> <code>b</code> <code>float</code> <p>float</p> <code>deltaT</code> <code>float</code> <p>float</p> <code>height_installation</code> <code>float</code> <p>float The height from the ground to the bottom of the panel.</p> <code>pv_width</code> <code>float</code> <p>float The width of the solar pv panel in meters.</p> <code>pv_length</code> <code>float</code> <p>float The length of the solar pv panel in meters.</p> <code>specific_capital_cost</code> <code>float</code> <p>float The cost rate of the solar pv system in GBP/kWp.</p> <code>specific_maintenance_cost</code> <code>float</code> <p>float The maintenance cost rate of the solar pv system in GBP/kW/year.</p> <p>Methods:</p> Name Description <code>size_module</code> <p>float The size of a single module in kWp.</p> <code>temperature_model_parameters</code> <p>dict[str, float] The parameters of the temperature model.</p> <code>set_default_module_data</code> <p>None Set the default module data.</p> <code>get_foot_width_pv_panel</code> <p>float Calculate the foot width of a solar pv based on its tilt angle.</p> <code>get_max_number_panels_by_row</code> <p>float Calculate the maximum number of panels in a row.</p> <code>get_max_number_rows</code> <p>int Calculate the maximum number of rows.</p> <code>get_number_modules</code> <p>float Calculate the number of modules required to meet size of the system.</p> <code>update_capital_cost</code> <p>None Update the capital cost of the solar pv system.</p>"},{"location":"reference/models/param/#models.param.PvPanelParam.area_module","title":"<code>area_module: float</code>  <code>property</code>","text":"<p>Calculate the area of a single module in m2.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The area of a single module in m2.</p>"},{"location":"reference/models/param/#models.param.PvPanelParam.size_module","title":"<code>size_module: float</code>  <code>property</code>","text":"<p>Calculate the size of a single module in kWp.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The size of a single module in kWp.</p>"},{"location":"reference/models/param/#models.param.PvPanelParam.temperature_model_parameters","title":"<code>temperature_model_parameters: dict[str, float]</code>  <code>property</code>","text":"<p>Return the parameters of the temperature model.</p> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>dict[str, float]: The parameters of the temperature model.</p>"},{"location":"reference/models/param/#models.param.PvPanelParam.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Initialise the scaling factor based on the module data and the size of the system.</p>"},{"location":"reference/models/param/#models.param.PvPanelParam.get_foot_width_pv_panel","title":"<code>get_foot_width_pv_panel(tilt)</code>","text":"<p>Calculate the foot width of a solar pv based on its tilt angle</p> <p>Parameters:</p> Name Type Description Default <code>tilt</code> <code>float</code> <p>The tilt angle of the solar pv panel in degrees.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The foot width of the solar pv panel in meters.</p>"},{"location":"reference/models/param/#models.param.PvPanelParam.get_max_number_panels_by_row","title":"<code>get_max_number_panels_by_row(length_available)</code>","text":"<p>Calculate the maximum number of panels in a row.</p> <p>Parameters:</p> Name Type Description Default <code>length_available</code> <code>float</code> <p>The available length to install the solar pv panels.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The maximum number of panels in a row.</p>"},{"location":"reference/models/param/#models.param.PvPanelParam.get_max_number_rows","title":"<code>get_max_number_rows(distance_btw_rows, width_available, tilt)</code>","text":"<p>Calculate the maximum number of rows of solar pv panels.</p> <p>Parameters:</p> Name Type Description Default <code>distance_btw_rows</code> <code>float</code> <p>The distance between rows of solar pv panels.</p> required <code>width_available</code> <code>float</code> <p>The available width to install the solar pv panels.</p> required <code>tilt</code> <code>int</code> <p>The tilt angle of the solar pv panel in degrees.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The maximum number of rows of solar pv panels.</p>"},{"location":"reference/models/param/#models.param.PvPanelParam.get_number_modules","title":"<code>get_number_modules(size_system)</code>","text":"<p>Calculate the number of modules required to meet size of the system</p> <p>Parameters:</p> Name Type Description Default <code>size_system</code> <code>float</code> <p>The size of the solar pv system in kWp.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The number of modules required to meet size of the system.</p>"},{"location":"reference/models/param/#models.param.PvPanelParam.set_default_module_data","title":"<code>set_default_module_data()</code>","text":"<p>Set the default module data.</p>"},{"location":"reference/models/param/#models.param.PvPanelParam.update_capital_cost","title":"<code>update_capital_cost(size_system)</code>","text":"<p>Update the capital cost of the solar pv system.</p> <p>Parameters:</p> Name Type Description Default <code>size_system</code> <code>float</code> <p>The size of the solar pv system in kWp.</p> required"},{"location":"reference/models/param/#models.param.get_pv_capital_costs","title":"<code>get_pv_capital_costs()</code>","text":"<p>Get the capital costs of a solar pv system in GBP/kWp.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The capital costs of a solar pv system in GBP/kWp.</p>"},{"location":"reference/models/pvsystem/","title":"Pvsystem","text":""},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation","title":"<code>PvInstallation</code>  <code>dataclass</code>","text":"<p>Class to store the parameters of a solar pv installation and estimate its electricity generation.</p> <p>Attributes:</p> Name Type Description <code>pv_panel_param</code> <code>PvPanelParam</code> <p>The parameters of the solar pv panel.</p> <code>weather_data_gen</code> <code>WeatherDataGenerator</code> <p>The weather data generator to use.</p> <code>geolocation</code> <code>GeoLocation</code> <p>The geolocation of the installation.</p> <code>name</code> <code>str</code> <p>The name of the installation.</p> <code>distance_btw_rows</code> <code>float</code> <p>The distance between rows of panels in meters.</p> <code>width_available</code> <code>float</code> <p>The width available for the installation in meters.</p> <code>length_available</code> <code>float</code> <p>The length available for the installation in meters.</p> <code>tilt</code> <code>int</code> <p>The tilt of the panels in degrees.</p> <code>azimuth</code> <code>int</code> <p>The azimuth of the panels in degrees.</p> <code>inverter_data</code> <code>DataFrame | None</code> <p>The data of the inverter.</p> <code>system_losses</code> <code>float</code> <p>The system losses in percentage.</p> <code>_size_system</code> <code>float</code> <p>The size of the system in kW peak.</p> <code>model_chain</code> <code>ModelChain | None</code> <p>The model chain to use.</p> <code>scaling_factor</code> <code>float</code> <p>The scaling factor to use.</p> <code>technology_type</code> <code>TechnologyType</code> <p>The technology type of the installation.</p> <code>results</code> <code>DataFrame</code> <p>The results of the installation.</p> <p>Methods:</p> Name Description <code>lifetime</code> <p>The lifetime of the installation.</p> <code>capital_cost</code> <p>The capital cost of the installation.</p> <code>annual_maintenance_cost</code> <p>The annual maintenance cost of the installation.</p> <code>size_system</code> <p>The size of the system.</p> <code>size_system.setter</code> <p>Set the size of the system.</p> <code>additional_demand</code> <p>The additional demand of the installation.</p> <code>onsite_generation</code> <p>The onsite generation of the installation.</p> <code>get_assets</code> <p>Get the assets of the installation.</p> <code>export_results</code> <p>Export the results of the installation.</p> <code>set_default_inverter_data</code> <p>Set the default inverter data.</p> <code>get_max_number_panels</code> <p>Get the maximum number of panels that can be installed.</p> <code>get_max_capacity_installed_on_flat_surface</code> <p>Get the maximum capacity that can be installed on a flat surface.</p> <code>create_pv_system</code> <p>Create the pv system.</p> <code>get_pvlib_location</code> <p>Get the pvlib location.</p> <code>run_model</code> <p>Run the model.</p> <code>plot_solar_elevation_against_azimuth</code> <p>Plot the solar elevation against azimuth.</p> <code>get_solar_position</code> <p>Get the solar position.</p> <code>compare_pv_weather_data_outputs</code> <p>Compare the results from the weather source with results from TMY and clearsky.</p> <code>size_pv_system_for_no_export</code> <p>Size the pv system for no export.</p> <code>calculate_export_demand</code> <p>Calculate the export demand.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.additional_demand","title":"<code>additional_demand: pd.DataFrame</code>  <code>property</code>","text":"<p>The additional demand of the installation.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The additional demand of the installation.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.annual_maintenance_cost","title":"<code>annual_maintenance_cost: dict[e2s_enums.TechnologyType, float]</code>  <code>property</code>","text":"<p>The annual maintenance cost of the installation.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>dict[e2s_enums.TechnologyType, float]: The annual maintenance cost of the installation.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.capital_cost","title":"<code>capital_cost: dict[e2s_enums.TechnologyType, float]</code>  <code>property</code>","text":"<p>The capital cost of the installation.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>dict[e2s_enums.TechnologyType, float]: The capital cost of the installation.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.lifetime","title":"<code>lifetime: float</code>  <code>property</code>","text":"<p>The lifetime of the installation.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The lifetime of the installation.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.onsite_generation","title":"<code>onsite_generation: pd.DataFrame</code>  <code>property</code>","text":"<p>The onsite generation of the installation.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The onsite generation of the installation.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.size_system","title":"<code>size_system: dict[e2s_enums.TechnologyType, float]</code>  <code>property</code> <code>writable</code>","text":"<p>The size of the system.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>dict[e2s_enums.TechnologyType, float]: The size of the system.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.calculate_export_demand","title":"<code>calculate_export_demand(org_import_elec)</code>","text":"<p>Calculate the export demand.</p> <p>Parameters:</p> Name Type Description Default <code>org_import_elec</code> <code>NDArray[float64]</code> <p>The original imported electricity.</p> required <p>Returns:</p> Type Description <p>npt.NDArray[np.float64]: The exported electricity.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.compare_pv_weather_data_outputs","title":"<code>compare_pv_weather_data_outputs()</code>","text":"<p>Compare the results from the org_weather_source with results from TMY and clearsky</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The results of the comparison.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.create_pv_system","title":"<code>create_pv_system()</code>","text":"<p>Create the pv system and appends it to the <code>self.model_chain</code> attribute.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.export_results","title":"<code>export_results()</code>","text":"<p>Export the results of the installation.</p> <p>Returns:</p> Type Description <p>pd.DataFrame: The results of the installation.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.get_assets","title":"<code>get_assets()</code>","text":"<p>Get the assets of the installation.</p> <p>Returns:</p> Type Description <code>dict[str, PvInstallation]</code> <p>dict[str, PvInstallation]: The assets of the installation.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.get_max_capacity_installed_on_flat_surface","title":"<code>get_max_capacity_installed_on_flat_surface()</code>","text":"<p>Calculate the number of panels that can be installed on a ground flat surface.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>The number of panels that can be installed on a ground flat surface.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.get_max_number_panels","title":"<code>get_max_number_panels()</code>","text":"<p>Calculate the number of panels that can be installed.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>The number of panels that can be installed.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.get_pvlib_location","title":"<code>get_pvlib_location()</code>","text":"<p>Get the pvlib location.</p> <p>Returns:</p> Type Description <code>Location</code> <p>pvlib.location.Location: The pvlib location object.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.get_solar_position","title":"<code>get_solar_position()</code>","text":"<p>Get the solar position.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The solar position.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.plot_solar_elevation_against_azimuth","title":"<code>plot_solar_elevation_against_azimuth()</code>","text":"<p>Plot the solar elevation against azimuth.</p> <p>Returns:</p> Type Description <p>plt.Figure: The figure of the ploplt.Axes: The axes of the plot.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.run_model","title":"<code>run_model(weather_df=None)</code>","text":"<p>Run the pv system model.</p> <p>Parameters:</p> Name Type Description Default <code>weather_df</code> <code>DataFrame | None</code> <p>The weather data to use.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The results of the model.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.set_default_inverter_data","title":"<code>set_default_inverter_data()</code>","text":"<p>Set the default inverter data.</p>"},{"location":"reference/models/pvsystem/#models.pvsystem.PvInstallation.size_pv_system_for_no_export","title":"<code>size_pv_system_for_no_export(site_load_demand, weather_dataf=None)</code>","text":"<p>Size the pv system for no export.</p> <p>Parameters:</p> Name Type Description Default <code>site_load_demand</code> <code>DataFrame</code> <p>The site load demand.</p> required <code>weather_dataf</code> <code>DataFrame | None</code> <p>The weather data to use.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The size of the pv system for no export.</p>"},{"location":"reference/structure/","title":"Index","text":""},{"location":"reference/structure/enums/","title":"Enums","text":""},{"location":"reference/structure/schema/","title":"Schema","text":""},{"location":"reference/utils/config/","title":"Config","text":""},{"location":"reference/utils/functions/","title":"Functions","text":""},{"location":"reference/utils/functions/#utils.functions.create_map","title":"<code>create_map(geoloc)</code>","text":"<p>Create a map centered at the given latitude and longitude </p> <p>Parameters:</p> Name Type Description Default <code>geoloc</code> <code>GeoLocation</code> <p>The location to center the map on</p> required <p>Returns:</p> Type Description <code>Map</code> <p>folium.Map: A map centered at the given location</p>"},{"location":"reference/utils/functions/#utils.functions.create_pv_saving_path","title":"<code>create_pv_saving_path(saving_path=None)</code>","text":"<p>Create a directory to save the results of the pv analysis </p> <p>Parameters:</p> Name Type Description Default <code>saving_path</code> <code>Path | None</code> <p>The path to save the results of the pv analysis</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to save the results of the pv analysis</p>"},{"location":"reference/utils/functions/#utils.functions.get_location_obj","title":"<code>get_location_obj(name, latitude, longitude, altitude, timezone)</code>","text":"<p>Create a location object with the given parameters </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the location</p> required <code>latitude</code> <code>float</code> <p>The latitude of the location</p> required <code>longitude</code> <code>float</code> <p>The longitude of the location</p> required <code>altitude</code> <code>float</code> <p>The altitude of the location</p> required <code>timezone</code> <code>str</code> <p>The timezone of the location</p> required <p>Returns:</p> Type Description <code>GeoLocation</code> <p>location.GeoLocation: A location object with the given parameters</p>"},{"location":"reference/utils/functions/#utils.functions.get_weatherdata_obj","title":"<code>get_weatherdata_obj(geolocation, year, weather_source, saving_path)</code>","text":"<p>Create a weather data object with the given parameters </p> <p>Parameters:</p> Name Type Description Default <code>geolocation</code> <code>GeoLocation</code> <p>The location of the weather data</p> required <code>year</code> <code>int</code> <p>The year of the weather data</p> required <code>weather_source</code> <code>WeatherDataSource</code> <p>The source of the weather data</p> required <code>saving_path</code> <code>Path</code> <p>The path to save the weather data</p> required <p>Returns:</p> Name Type Description <code>WeatherData</code> <code>WeatherData</code> <p>A weather data object with the given parameters</p>"}]}